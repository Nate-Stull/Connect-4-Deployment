{"version":3,"sources":["components/board.js","App.js","serviceWorker.js","index.js"],"names":["Board","useState","colTracker","setColTracker","grid","setGrid","X_Turn","setX_Turn","updateBoard","row","col","newColTracker","console","log","alert","newGrid","checkVertWin","checkHorWin","checkLDiagWin","checkRDiagWin","resetGame","streak","lastSeen","newStreak","Card","centered","Content","color","Header","as","textAlign","Description","Table","celled","Row","Cell","onClick","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2f13dddd.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport { Table, Header, Card } from \"semantic-ui-react\";\n\nconst Board = () => {\n  const [colTracker, setColTracker] = useState([0, 0, 0, 0, 0, 0, 0]);\n  const [grid, setGrid] = useState([\n    [\"*\", \"*\", \"*\", \"*\", \"*\", \"*\", \"*\"],\n    [\"*\", \"*\", \"*\", \"*\", \"*\", \"*\", \"*\"],\n    [\"*\", \"*\", \"*\", \"*\", \"*\", \"*\", \"*\"],\n    [\"*\", \"*\", \"*\", \"*\", \"*\", \"*\", \"*\"],\n    [\"*\", \"*\", \"*\", \"*\", \"*\", \"*\", \"*\"],\n    [\"*\", \"*\", \"*\", \"*\", \"*\", \"*\", \"*\"],\n  ]);\n  const [X_Turn, setX_Turn] = useState(true);\n\n  const updateBoard = (row, col) => {\n    let newColTracker = colTracker;\n    newColTracker[col] = newColTracker[col] + 1;\n    setColTracker(newColTracker);\n    console.log(\"Column \" + col + \" updated.\");\n    if (newColTracker[col] > 6) {\n      alert(\"Invalid move!\");\n    } else {\n      //update grid\n      let newGrid = grid;\n      if (X_Turn) {\n        newGrid[6 - newColTracker[col]][col] = \"X\";\n      } else {\n        newGrid[6 - newColTracker[col]][col] = \"O\";\n      }\n      setGrid(newGrid);\n      //check for win\n      if (\n        checkVertWin(0, 0, 1, \"z\") ||\n        checkHorWin(0, 0, 1, \"z\") ||\n        checkLDiagWin(0, 0, 1, \"z\") ||\n        checkRDiagWin(0, 0, 1, \"z\")\n      ) {\n        if (X_Turn) {\n          alert(\"X wins!\");\n        } else {\n          alert(\"O wins!\");\n        }\n        resetGame();\n      }\n      setX_Turn(!X_Turn);\n    }\n  };\n\n  const resetGame = () => {\n    setColTracker([0, 0, 0, 0, 0, 0]);\n    setGrid([\n      [\"*\", \"*\", \"*\", \"*\", \"*\", \"*\", \"*\"],\n      [\"*\", \"*\", \"*\", \"*\", \"*\", \"*\", \"*\"],\n      [\"*\", \"*\", \"*\", \"*\", \"*\", \"*\", \"*\"],\n      [\"*\", \"*\", \"*\", \"*\", \"*\", \"*\", \"*\"],\n      [\"*\", \"*\", \"*\", \"*\", \"*\", \"*\", \"*\"],\n      [\"*\", \"*\", \"*\", \"*\", \"*\", \"*\", \"*\"],\n    ]);\n  };\n\n  const checkHorWin = (row, col, streak, lastSeen) => {\n    if (streak === 4) {\n      return true;\n    }\n    if (row > 5 || col > 6) {\n      return false;\n    }\n    let newStreak = 1;\n    if (\n      lastSeen === \"z\" ||\n      (lastSeen === grid[row][col] && grid[row][col] !== \"*\")\n    ) {\n      newStreak = streak + 1;\n    }\n    return (\n      checkHorWin(row, col + 1, newStreak, grid[row][col]) ||\n      checkHorWin(row + 1, col, 1, grid[row][col])\n    );\n  };\n\n  const checkVertWin = (row, col, streak, lastSeen) => {\n    if (streak === 4) {\n      return true;\n    }\n    if (row > 5 || col > 6) {\n      return false;\n    }\n    let newStreak = 1;\n    if (\n      lastSeen === \"z\" ||\n      (lastSeen === grid[row][col] && grid[row][col] !== \"*\")\n    ) {\n      newStreak = streak + 1;\n    }\n    return (\n      checkVertWin(row + 1, col, newStreak, grid[row][col]) ||\n      checkVertWin(row, col + 1, 1, grid[row][col])\n    );\n  };\n\n  const checkLDiagWin = (row, col, streak, lastSeen) => {\n    if (streak === 4) {\n      return true;\n    }\n    if (row > 5 || col > 6) {\n      return false;\n    }\n    let newStreak = 1;\n    if (\n      lastSeen === \"z\" ||\n      (lastSeen === grid[row][col] && grid[row][col] !== \"*\")\n    ) {\n      newStreak = streak + 1;\n    }\n    return (\n      checkLDiagWin(row + 1, col + 1, newStreak, grid[row][col]) ||\n      checkLDiagWin(row, col + 1, 1, grid[row][col]) ||\n      checkLDiagWin(row + 1, col, 1, grid[row][col])\n    );\n  };\n\n  const checkRDiagWin = (row, col, streak, lastSeen) => {\n    if (streak === 4) {\n      return true;\n    }\n    if (row > 5 || col > 6 || col < 0) {\n      return false;\n    }\n    let newStreak = 1;\n    if (\n      lastSeen === \"z\" ||\n      (lastSeen === grid[row][col] && grid[row][col] !== \"*\")\n    ) {\n      newStreak = streak + 1;\n    }\n    return (\n      checkRDiagWin(row + 1, col - 1, newStreak, grid[row][col]) ||\n      checkRDiagWin(row, col + 1, 1, grid[row][col]) ||\n      checkRDiagWin(row + 1, col, 1, grid[row][col])\n    );\n  };\n\n  const getCurPlayer = () => {\n    if (X_Turn) {\n      return \"X's turn...\";\n    }\n    return \"O's turn...\";\n  };\n\n  return (\n    <Card centered>\n      <Card.Content color=\"olive\">\n        <Header as=\"h1\" textAlign=\"center\">\n          Connect 4\n        </Header>\n        <Card.Description>\n          <Header as=\"h2\" textAlign=\"center\">\n            {getCurPlayer()}\n          </Header>\n          <Table celled>\n            <Table.Row>\n              <Table.Cell\n                onClick={() => {\n                  updateBoard(0, 0);\n                }}\n              >\n                {grid[0][0]}\n              </Table.Cell>\n              <Table.Cell\n                onClick={() => {\n                  updateBoard(0, 1);\n                }}\n              >\n                {grid[0][1]}\n              </Table.Cell>\n              <Table.Cell\n                onClick={() => {\n                  updateBoard(0, 2);\n                }}\n              >\n                {grid[0][2]}\n              </Table.Cell>\n              <Table.Cell\n                onClick={() => {\n                  updateBoard(0, 3);\n                }}\n              >\n                {grid[0][3]}\n              </Table.Cell>\n              <Table.Cell\n                onClick={() => {\n                  updateBoard(0, 4);\n                }}\n              >\n                {grid[0][4]}\n              </Table.Cell>\n              <Table.Cell\n                onClick={() => {\n                  updateBoard(0, 5);\n                }}\n              >\n                {grid[0][5]}\n              </Table.Cell>\n              <Table.Cell\n                onClick={() => {\n                  updateBoard(0, 6);\n                }}\n              >\n                {grid[0][6]}\n              </Table.Cell>\n            </Table.Row>\n            <Table.Row>\n              <Table.Cell\n                onClick={() => {\n                  updateBoard(1, 0);\n                }}\n              >\n                {grid[1][0]}\n              </Table.Cell>\n              <Table.Cell\n                onClick={() => {\n                  updateBoard(1, 1);\n                }}\n              >\n                {grid[1][1]}\n              </Table.Cell>\n              <Table.Cell\n                onClick={() => {\n                  updateBoard(1, 2);\n                }}\n              >\n                {grid[1][2]}\n              </Table.Cell>\n              <Table.Cell\n                onClick={() => {\n                  updateBoard(1, 3);\n                }}\n              >\n                {grid[1][3]}\n              </Table.Cell>\n              <Table.Cell\n                onClick={() => {\n                  updateBoard(1, 4);\n                }}\n              >\n                {grid[1][4]}\n              </Table.Cell>\n              <Table.Cell\n                onClick={() => {\n                  updateBoard(1, 5);\n                }}\n              >\n                {grid[1][5]}\n              </Table.Cell>\n              <Table.Cell\n                onClick={() => {\n                  updateBoard(1, 6);\n                }}\n              >\n                {grid[1][6]}\n              </Table.Cell>\n            </Table.Row>\n            <Table.Row>\n              <Table.Cell\n                onClick={() => {\n                  updateBoard(2, 0);\n                }}\n              >\n                {grid[2][0]}\n              </Table.Cell>\n              <Table.Cell\n                onClick={() => {\n                  updateBoard(2, 1);\n                }}\n              >\n                {grid[2][1]}\n              </Table.Cell>\n              <Table.Cell\n                onClick={() => {\n                  updateBoard(2, 2);\n                }}\n              >\n                {grid[2][2]}\n              </Table.Cell>\n              <Table.Cell\n                onClick={() => {\n                  updateBoard(2, 3);\n                }}\n              >\n                {grid[2][3]}\n              </Table.Cell>\n              <Table.Cell\n                onClick={() => {\n                  updateBoard(2, 4);\n                }}\n              >\n                {grid[2][4]}\n              </Table.Cell>\n              <Table.Cell\n                onClick={() => {\n                  updateBoard(2, 5);\n                }}\n              >\n                {grid[2][5]}\n              </Table.Cell>\n              <Table.Cell\n                onClick={() => {\n                  updateBoard(2, 6);\n                }}\n              >\n                {grid[2][6]}\n              </Table.Cell>\n            </Table.Row>\n            <Table.Row>\n              <Table.Cell\n                onClick={() => {\n                  updateBoard(3, 0);\n                }}\n              >\n                {grid[3][0]}\n              </Table.Cell>\n              <Table.Cell\n                onClick={() => {\n                  updateBoard(3, 1);\n                }}\n              >\n                {grid[3][1]}\n              </Table.Cell>\n              <Table.Cell\n                onClick={() => {\n                  updateBoard(3, 2);\n                }}\n              >\n                {grid[3][2]}\n              </Table.Cell>\n              <Table.Cell\n                onClick={() => {\n                  updateBoard(3, 3);\n                }}\n              >\n                {grid[3][3]}\n              </Table.Cell>\n              <Table.Cell\n                onClick={() => {\n                  updateBoard(3, 4);\n                }}\n              >\n                {grid[3][4]}\n              </Table.Cell>\n              <Table.Cell\n                onClick={() => {\n                  updateBoard(3, 5);\n                }}\n              >\n                {grid[3][5]}\n              </Table.Cell>\n              <Table.Cell\n                onClick={() => {\n                  updateBoard(3, 6);\n                }}\n              >\n                {grid[3][6]}\n              </Table.Cell>\n            </Table.Row>\n            <Table.Row>\n              <Table.Cell\n                onClick={() => {\n                  updateBoard(4, 0);\n                }}\n              >\n                {grid[4][0]}\n              </Table.Cell>\n              <Table.Cell\n                onClick={() => {\n                  updateBoard(4, 1);\n                }}\n              >\n                {grid[4][1]}\n              </Table.Cell>\n              <Table.Cell\n                onClick={() => {\n                  updateBoard(4, 2);\n                }}\n              >\n                {grid[4][2]}\n              </Table.Cell>\n              <Table.Cell\n                onClick={() => {\n                  updateBoard(4, 3);\n                }}\n              >\n                {grid[4][3]}\n              </Table.Cell>\n              <Table.Cell\n                onClick={() => {\n                  updateBoard(4, 4);\n                }}\n              >\n                {grid[4][4]}\n              </Table.Cell>\n              <Table.Cell\n                onClick={() => {\n                  updateBoard(4, 5);\n                }}\n              >\n                {grid[4][5]}\n              </Table.Cell>\n              <Table.Cell\n                onClick={() => {\n                  updateBoard(4, 6);\n                }}\n              >\n                {grid[4][6]}\n              </Table.Cell>\n            </Table.Row>\n            <Table.Row>\n              <Table.Cell\n                onClick={() => {\n                  updateBoard(5, 0);\n                }}\n              >\n                {grid[5][0]}\n              </Table.Cell>\n              <Table.Cell\n                onClick={() => {\n                  updateBoard(5, 1);\n                }}\n              >\n                {grid[5][1]}\n              </Table.Cell>\n              <Table.Cell\n                onClick={() => {\n                  updateBoard(5, 2);\n                }}\n              >\n                {grid[5][2]}\n              </Table.Cell>\n              <Table.Cell\n                onClick={() => {\n                  updateBoard(5, 3);\n                }}\n              >\n                {grid[5][3]}\n              </Table.Cell>\n              <Table.Cell\n                onClick={() => {\n                  updateBoard(5, 4);\n                }}\n              >\n                {grid[5][4]}\n              </Table.Cell>\n              <Table.Cell\n                onClick={() => {\n                  updateBoard(5, 5);\n                }}\n              >\n                {grid[5][5]}\n              </Table.Cell>\n              <Table.Cell\n                onClick={() => {\n                  updateBoard(5, 6);\n                }}\n              >\n                {grid[5][6]}\n              </Table.Cell>\n            </Table.Row>\n          </Table>\n        </Card.Description>\n      </Card.Content>\n    </Card>\n  );\n};\n\nexport default Board;\n","import React from \"react\";\nimport Board from \"./components/board.js\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Board />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}